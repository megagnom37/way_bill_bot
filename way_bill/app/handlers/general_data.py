from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink
from loguru import logger

from way_bill.app.states import AppState
from way_bill.app.utils.validators import validate_way_bill, validate_date_value
from way_bill.app.handlers.common import add_record, cmd_start
from way_bill.app.google.core import google_worker

from way_bill.app.config import config


async def add_way_bill(message: types.Message, state: FSMContext):
    way_bill_value = validate_way_bill(message.text.lower())

    if way_bill_value is None:
        await message.answer(
            '‚òπÔ∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞.</b>\n'
            '<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>',
             parse_mode="HTML"
        )
        return await add_record(message=message, state=state)

    logger.debug(f'Got value of way bill number: {way_bill_value}')

    await state.update_data(way_bill_number=way_bill_value)
    await date(message=message, state=state)


async def date(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üìÜ –°–µ–≥–æ–¥–Ω—è')
    keyboard.add('‚ùå –û—Ç–º–µ–Ω–∞')

    await AppState.waiting_date.set()

    await message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ–µ –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è"</b>\n'
        '<b>(—Ñ–æ—Ä–º–∞—Ç: "–î–î.–ú–ú.–ì–ì–ì–ì")</b>',
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def add_date(message: types.Message, state: FSMContext):
    date_value = validate_date_value(message.text.lower())
    if date_value is None:
        await message.answer(
            '‚òπÔ∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã.</b>\n'
            '<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>',
            parse_mode="HTML"
        )
        return await date(message=message, state=state)

    logger.debug(f'Got value of date: {date_value}')

    await state.update_data(date=date_value)
    await main_menu(message=message, state=state)


async def main_menu(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üöó–ü—Ä–æ–±–µ–≥', 'üïí–ü—Ä–æ—Å—Ç–æ–π', '‚õΩÔ∏è–ó–∞–ø—Ä–∞–≤–∫–∞')
    keyboard.add('üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', '‚ùå–û—Ç–º–µ–Ω–∞')

    await AppState.waiting_type_of_data.set()

    await message.answer(
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.</b>\n'
        '<b>–í –∫–æ–Ω—Ü–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</b>',
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def save(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    logger.debug(f'Save request: {user_data}')

    try:
        is_saved = google_worker.try_to_save(user_data)
    except Exception:
        await message.answer(
            '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b>\n'
            '<b>–ù–∞–ø–∏—à–∏—Ç–µ –ò–≤–∞–Ω—É –∏ –æ–Ω –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç</b>\n'
            '<b>–ù–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ</b>',
            parse_mode="HTML"
        )
        return await cmd_start(message=message, state=state)
    if is_saved:
        logger.debug('Successfully saved')
        await message.answer(
            '‚úÖ <b>–£—Å–ø–µ–ø—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>',
            parse_mode="HTML"
        )
        await cmd_start(message=message, state=state)
    else:
        logger.debug(f'Record with date {user_data["date"]} already exists')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('üìù –ó–∞–º–µ–Ω–∏—Ç—å')
        keyboard.add('‚ùå –û—Ç–º–µ–Ω–∞')

        await AppState.waiting_replace_handling.set()

        link = f'https://docs.google.com/spreadsheets/d/{config["way_bill_google_spreadsheet"]}'
        link = hlink('–¢–∞–±–ª–∏—Ü–∞', link)

        await message.answer(
            f'<b>–ó–∞–ø–∏—Å—å —Å –¥–∞—Ç–æ–π: {user_data["date"]} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n'
            '<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å</b>\n\n'
            f'<b>{link}</b>',
            parse_mode="HTML",
            reply_markup=keyboard
        )


async def replace(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    logger.debug(f'Replace request: {user_data}')

    google_worker.replace(user_data)

    await message.answer(
        '‚úÖ <b>–£—Å–ø–µ–ø—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>',
        parse_mode="HTML"
    )
    await cmd_start(message=message, state=state)


def register_handlers_general_data(dp: Dispatcher):
    dp.register_message_handler(
        add_way_bill, 
        state=AppState.waiting_way_bill
    )
    dp.register_message_handler(
        add_date, 
        state=AppState.waiting_date
    )
    dp.register_message_handler(
        main_menu, 
        text='üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', 
        state=[
            AppState.waiting_mileage_place, 
            AppState.waiting_mileage_type,
            AppState.waiting_mileage_value,
            AppState.waiting_downtime_value,
            AppState.waiting_fuel_value,
        ]
    )
    dp.register_message_handler(
        save,
        text='üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        state=AppState.waiting_type_of_data
    )
    dp.register_message_handler(
        replace,
        text='üìù –ó–∞–º–µ–Ω–∏—Ç—å',
        state=AppState.waiting_replace_handling
    )


